// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants.ControllerConstants;
import frc.robot.subsystems.BallClock;
import frc.robot.subsystems.BallShooter;

public class BallShoot extends CommandBase {
    // Subsystems
    public final BallShooter m_ballShooter;
    public final BallClock m_ballClock;

    // Controllers
    private final Joystick driverJoystick = new Joystick(ControllerConstants.driverJoystickPort);
    private final XboxController auxController = new XboxController(ControllerConstants.auxXboxController);

    /**
     * Creates a constructor of the ball shooter commands
     * 
     * @param subShooter BallShooter Shooter subsystem
     * @param subClock   BallClock Clocking subsystem
     */
    public BallShoot(BallShooter subShooter, BallClock subClock) {
        m_ballShooter = subShooter;
        addRequirements(m_ballShooter);

        m_ballClock = subClock;
        addRequirements(m_ballClock);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        if (driverJoystick.getTrigger()) {
            m_ballClock.releaseBall();
        }

        if (auxController.getLeftBumper()) {
            m_ballShooter.shootBall();
        } else if (auxController.getRightBumper()) {
            m_ballShooter.stopShooter();
        }

        if (driverJoystick.getRawButton(3)) {
            m_ballClock.acceptBall();
        } else if (driverJoystick.getRawButton(4)) {
            m_ballClock.rejectBall();
        } else {
            m_ballClock.stopClock();
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
