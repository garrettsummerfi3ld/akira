// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

    private static RobotContainer m_robotContainer = new RobotContainer();

    // The robot's subsystems
    public final Winch m_winch = new Winch();
    public final Tilt m_lift = new Tilt();
    public final BallIngest m_ballIngest = new BallIngest();
    public final BallShooter m_ballShooter = new BallShooter();
    public final BallIndexer m_ballIndexer = new BallIndexer();
    public final MechanumDriveTrain m_mechanumDrive = new MechanumDriveTrain();

    // Joysticks
    private final XboxController xboxController = new XboxController(Constants.ControllerConstants.auxXboxController);
    private final Joystick driveJoystick = new Joystick(Constants.ControllerConstants.driverJoystickPort);

    SendableChooser<Command> m_chooser = new SendableChooser<>();

    private RobotContainer() {

        SmartDashboard.putData("Autonomous", new Autonomous());
        SmartDashboard.putData("BallShoot", new BallShoot());

        configureButtonBindings();

        m_mechanumDrive.setDefaultCommand(new MechanumDrive(m_mechanumDrive));

        SmartDashboard.putData("Auto Mode", m_chooser);
    }

    public static RobotContainer getInstance() {
        return m_robotContainer;
    }

    /**
     * Use this method to define your button->command mappings. Buttons can be
     * created by
     * instantiating a {@link GenericHID} or one of its subclasses ({@link
     * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
     * it to a
     * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
     */
    private void configureButtonBindings() {
        // Create some buttons
        final JoystickButton shoot = new JoystickButton(xboxController, XboxController.Button.kA.value);
        shoot.whenPressed(new BallShoot(), true);
        SmartDashboard.putData("Shoot", new BallShoot());

    }

    public Joystick getDriveJoystick() {
        return driveJoystick;
    }

    public XboxController getXboxController() {
        return xboxController;
    }

    /**
     * Use this to pass the autonomous command to the main {@link Robot} class.
     *
     * @return the command to run in autonomous
     */
    public Command getAutonomousCommand() {
        // The selected command will be run in autonomous
        return m_chooser.getSelected();
    }

}
